== CHANGELOG
Bug: comment spill when URLs embedded (syntax catagory clashes with flags)
Bug: don't use function-face. Inherit values for method face
Corrected regexp for previous commit
struct/enum/namespace highlighting like class
Bug: Some method symbols not highlighting in the test (missing space-skip code) 
New class syntax predicate, more accurate, less verbose
Bug: Some generics not highlighting in the test .vapi file (partial solution, added "owned" to parameter directives)
New hybrid newline function
Changed syntactical newline search to use some sexp
Regex tidy, some fontlock changes
Cache code written, but not worth it.
Bug: Some line start symbols being matched by modifier propetizing
Bug: Enum elements highlighting (again. added defenses)
Enum/struct methods should be highlighted
Bug: Enums literals highlighting in green (class syntax detection fail)
is-... functions renamed as ...-p finctions.
Add Makefile/compile info to README
Bug: Tabs not indenting fully (use display, not buffer, posisiton)
Tabs can be switched on fly
Feature: source file tabbing detection
Tab control unlocked
Bug: infinite loops on vapi test file (newline skip identifies symbol parts).
Viable approch for customizing indents. 
Add vapi to acceptable filelist.
Should be called vala-mode2. It's not the first.
Optional whitespace cleanup? See cc mode... (no, the auto-cleanup function is simple, leave it)
Bug: highlighting fails chunks (horrible, elusive, initial syntax definition identifies strings, causing newline detection to skip).
License
Some whitespace cleanup
Dont highlight strings in attributes? (disagree. ugly, but informative)
Vala preprocessor directives.
Implement semantic comment parsing.
Some builtin indent styles
Better attribute detection and highlighting
Fill for comments with valadoc markup
Fill strings


== TODO

Tidy Regex - second look needed
Check regexps for consistency (define some as symbol?)

Could have a skip OO keystroke?

Some generics not highlighting in the test .vapi file (generic method symbols failing)
This line,
                public Node<unowned G> copy ();
Need documentation back!


are @ esapes (+ */&) really working?


Some themes for > 8 bit terminals.

May be duplication between syntax pskip and indent detection code

Check against coding recommendations.

Is sexp stepping ok?

Maybe some would like a choice about using the semantic face function (especially with what it does to /** inline block comments **/)



== Indenting
Could have indents on preprocessing directives (make into brackets?)

More sophisticated indenting.
- Interesting info on indenting styles,
;; http://www.riedquat.de/prog/style



== Tabs
For new files, indent should default to indent-tabs-mode

Test permanent saves of indent style customization.

 
== Ignoring text in comments
EMACS has a variable
 parse-sexp-ignore-comments
If the value is non-nil, then comments are treated as whitespace by the functions in this section and by forward-sexp, scan-lists and scan-sexps

Which can be toggled on or off. This seems to default to nil, but many, many modes switch it to true. What does it do?


== Compiling
no:

yes: paragraph
     lib
     styles
     faces
     fontlock
     indent




== highlighting

Three highlight modes:
This now somewhat abandoned functionality could be interesting in this mode, not for performance reasons, but for "levels of highlighting", e.g.
3 full
2 comments/keywords (maybe comments/OO definitions)
1 comments only
But I'm not going to read that page again, right now. Besides, due to the extensive use of syntax parsing calls, it involves tracking down the forntlock variables so the parsing can work from them (low priority). 



== Profiling
Class testing must be the slowest part of this. May be able to cache against brackets? Theres some code in vala-syntax: already for bracket caching.

If bracket/class status is cached, may be more profitable to make newlines into punctuation syntax? 



== The issue of custom variables
Variable setting in the mode is inconsistent, not adhering to standards, and haphazard.

The reasons are simple - the online manual is hapless, no other information seems to be readily available. Until information is stumbled upon, or forthcoming, the mode will not improve. Help required?

CC mode may contain some clues about general structure of variables,
http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

Places where the setting/reading of variables is important, and currently not/badly implemented,


=== Fontlocking
There is a manual note that there is no need to make variables for fontlocking. Why, I have not pursued. Something to do with the functions doing it, I suppose. We'd need variables to change fonts, would we? 



There comes a point where it is not worth fighting with a system because the gains are too small. If some part of the information I hold grows in some more fertile way, than perhaps the mode will progress.

---------------------


== MAYBEPATH
Draft
No testing.
Features considered, code sketched out. 
May contain intrusive debug code, but should be operative.

Alpha
Only basic testing. May yet turn a buffer green, or a fill may collapse a whole file.
All features/API subject to change.
May contain debug code, but should be operative.

Beta
Enough testing, even internal, to ensure Alpha behaviour unlikely.
Basic approach is frozen, though features open to change.
May contain debug code, but should be operative.

Release Candidate
Works with EMACS as expected by an EMACS user.
Code developed enough for the features unlikly to change.
Debug code should be formalized.

Release
A Release Candidate tested enough, preferably externally, to suggest it will perform with the stated features, and as the user can expect.
