== CHANGELOG
Bug: infinite loops on vapi test file (newline skip identifies symbol parts).
Viable approch for customizing indents. 
Add vapi to acceptable filelist.
Should be called vala-mode2. It's not the first.
Optional whitespace cleanup? See cc mode... (no, the auto-cleanup function is simple, leave it)
Bug: highlighting fails chunks (horrible, elusive, initial syntax definition identifies strings, causing newline detection to skip).
License
Some whitespace cleanup
Dont highlight strings in attributes? (disagree. ugly, but informative)
Vala preprocessor directives.
Implement semantic comment parsing.
Some builtin indent styles
Better attribute detection and highlighting
Fill for comments with valadoc markup
Fill strings


== TODO
More sophisticated indenting.
- Interesting info on indenting styles,
;; http://www.riedquat.de/prog/style

Tidy Regex - much deprecation
Regexs need cheching for consistency (define some as symbol?)



Check tab control (now on hold)

Enum methods not highlighting

Indent code is not giving correct indent types at right places?

Test permanent saves of indent style customization.


Could have indents on preprocessing directives (make into brackets?)

Some themes for > 8 bit terminals

May be duplication between syntax pskip and indent detection code

Check against coding recommendations.

Is sexp stepping ok?

Maybe some would like a choice about using the semantic face function (especially with what it does to /** inline block comments **/)



Some of the new font faces could/should inherit, but I never figured out how to do that *and* alter them.

The is-... functions should probably be renamed as ...-p finctions.

== Compiling
no:

yes: paragraph
     lib
     styles
     faces
     fontlock
     indent

Add compile info to README

== highlighting
Stray highlighlighting- see bottom of .vapi test file

Three highlight modes:
This now somewhat abandoned functionality could be interesting in this mode, not for peformance reasons, but for "levels of highlighting", e.g.
3 full
2 comments/keywords (maybe comments/OO definitions)
1 comments only
But I'm not going to read that page again, right now. Besides, due to the extensive use of syntax parsing calls, it involves tracking down the forntlock variables so the parsing can work from them (low priority). 


== Profiling
Class testing must be the slowest part of this. May be able to cache against brackets? Theres some code in vala-syntax: already for bracket caching.

If bracket/class status is cached, may be more profitable to make newlines into punctuation syntax? 

== The issue of custom variables
Variable setting in the mode is inconsistent, not adhering to standards, and haphazard.

The reasons are simple - the online manual is hapless, no other information seems to be readily available. Until information is stumbled upon, or forthcoming, the mode will not improve. Help required?

CC mode may contain some clues about general structure of variables,
http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

Places where the setting/reading of variables is important, and currently not/badly implemented,


=== Fontlocking
There is a manual note that there is no need to make variables for fontlocking. Why, I have not pursued. Something to do with the functions doing it, I suppose. We'd need variables to change fonts, would we? 



==== Indent style, tabs vs. spaces
I can't even find out how to get my EMACS to indent with tabs. Even if

indent-tabs-mode

is changed on initialization to true,

indent-to
indent-line-to

both return spaces. Tabify doesn't help, either.

Once we were through this, there is the problem that the mode shoud react to indent-tabs-mode (if that is indeed how to get tabs). How does it change? Does it change immediately? On a wide basis?

There comes a point where it is not worth fighting with a system because the gains are too small. If some part of the information I hold grows in some more fertile way, than perhaps the mode will progress.

---------------------
EMACS organises space/tabbing by taking requested indents, checking variables to see if it can use tabs, and if it can, using them. Differences are padded out using spaces. This works rather badly with our current, rigid, multiple-spacing, preset indentation styles.


== MAYBEPATH
Draft
No testing.
Features considered, code sketched out. 
May contain intrusive debug code, but should be operative.

Alpha
Only basic testing. May yet turn a buffer green, or a fill may collapse a whole file.
All features/API subject to change.
May contain debug code, but should be operative.

Beta
Enough testing, even internal, to ensure Alpha behaviour unlikely.
Basic approach is frozen, though features open to change.
May contain debug code, but should be operative.

Release Candidate
Works with EMACS as expected by an EMACS user.
Code developed enough for the features unlikly to change.
Debug code should be formalized.

Release
A Release Candidate tested enough, preferably externally, to suggest it will perform as the features and user can expect.
